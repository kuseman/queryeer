CHANGELOG

Queryeer

v2.10.0
fix: Fix issues with MSSql native authentication where password isn't present in various places
fix: Fix issue in TextOutputComponent to handle EDT/not EDT thread problems
fix: Handle visible status separately from Window's visible propery on QuickPropertiesWindow to know the users intent better

v2.9.0
feat: Add support for text editor short cuts in Payloadbuilder
feat: Add support for syncing JDBC tree with the selected tab. Selectes the connection/database upon focus of file. This is configurable in a new toolbar above tree.
feat: Add tree configurable. This configurable only contains one option atm. to hide SqlServer 'sys' schema nodes.
feat: Add support in PluginHandler to handle a eclipse (or any other IDE) project class path as source. This enables to work with a plugin without the need to build a plugin distribution
feat: Add support for Windows Native authentication. NOTE! Does not handle anything regarding auth dll that must be copied to PATH
feat: Return connections with a warning icon and tooltip that wasn't connectable in Jdbc datasources quick model
feat: Add support for text editor query shortcuts without any selected text in editor
fix: Fix NPE when using the NONE output
fix: Fix issue in query plan graph where all edges was counted as zero/dashed row count even if they had rows
fix: Properly close text editor and it's dialogs from the static value dialog popup
fix: Fix issue in QueryeerTree where osx was not detected and META/CTRL hoover links did not work correctly

v2.8.0
chore: Bump payloadbuilder
feat: Wrap icons in a proxy that adapts to current LAF to render them as dark or light
feat: Add support for LAF's. Stored in config and choosen in queryeer configurable
feat: Add FlatLaf dependency along with intellij themes
fix: Alter thread pools in texteditor and table output component to cached variants with limit
feat: Add Variables configurable for Payloadbuilder to be able to inject vars and secret vars into session before execute.
fix: Let configurables return if commit succeeded or not to be able to stay in dirty state if for some reason a configurable couldn't commit.

v2.7.0
chore: Bump Payloadbuilder
fix: Fix column label in JDBC tree to show MAX instead of Integer.MAX_VALUE
feat: Code-complete table copied values from clipboard when located at a IN-expression
fix: Minor fixes in paste special dialog
feat: Add support for OutputComponents to implement an extended OutputWriter to be able to receive metadata about a result set.
This is implemented on TableOutputWriter and used ju JdbcQuery engine to print a description text above each result set with
information about which connection/database etc. the result set was originating from.
fix: Trigger value dialog in table when pressing enter
feat: Add remove all trailing spaces action in TextEditor
fix: Paste special fixes. More verbose dialog, added UNION ALL support
feat: Add support for cloning connections (JDBC/Elastic)
feat: Add support for testing JDBC connections in dialog
fix: Change the flow in quick window framework to let model be more versatile reagarding selections of items.
Now the implementer can return what shuold be done upon selection. For example reload model is an option that lets
the implementer first authorize or in other ways ask user for input and then reload the quick items list.

v2.6.0
feat: Add support for quick change of datasources similar to quick change of files. Triggered by F2 and is query engine implementation specific. JDBC implemented so far
feat: Add project files into quick files dialog
feat: Add support for disable JDBC connections to avoid trying to load databases on broken connections
fix: Small UI fixes in JDBC quick properties

v2.5.0
fix: Register Queryeer base actions to registry.
fix: Add show logs/tasks in window menu
feat: Include recent files in quick windows popup
fix: Add support for setting LAF from startup script

v2.4.0
feat: Add a quick windows window that appears when pressing F1 to quickly change between open tabs
fix: Change logs dialog to show a table instead of text editor to easier dig around
fix: Refactor QueryFileView/QueryFileModel to move everything IQueryFile-related to the model where it belongs

v2.3.0
fix: Don't crash if queryeer config don't load
fix: Fix crash when the last file was closed
fix: Run show options dialog from event on EDT
fix: TextEditor should not inherit panel due to clash with addPropertyChangeListener method that causes NPE on some LAF:s
fix: Guard against NPE when setting image icons on dialogs
fix: Fix broken default config of JDBC query actions where Definition submenu did not appear
fix: Add support for setting loglevel in LogsDialog
fix: Refactor all dialogs to a common base class to handle image icons, close shortcuts, showing relativt to current active window etc.

v2.2.0
feat: Add support for custom table query actions that can generate queries unique to the cell or row that was clicked
feat: Add support for configuring a custom shared folder path to make upgrades easier

v2.1.0
fix: Wait for backup thread to complete upon exit Queryeer to avoid closing the JVM in the middle of writing files
fix: Don't de/serialize java.io.File on Projects view, use a string instead
fix: Catch errors when loading session config else Queryeer won't start

v2.0.0
feat: Support for different query engines
- Now different query engines can be added to Queryeer and not only Payloadbuilder which makes Queeyeer a much more versatile editor

feat: Query shortcuts in Texteditor with support for override rules that triggers differently depending on active query engine etc.

feat: JDBC engine added
- A new JDBC engine is built with support for plain JDBC which pretty much makes Queryeer a regular SQL query editor.
  * Support for code completion
  * Support for links in editor and navigation tree (via CTRL/META mouse hoover)
  * Support for visualizing query plans
  NOTE! All features above depends on implementation status for different RDBMS:es (MSSQL has most support, some parts for Oracle)

feat: Project View
- A project view with support for adding folders that are tracked for changes and integrates with Queryeer.
  * Opens new files
  * Switch to an open file
  * Fast search for files in tree

feat: General file hadling
- Many improvements in file handling in general
  * A dialog with currently open windows where files can be saved, activated etc.
  * Fast selecting a open file from menu
  * Sorting open files on name/activity/etc.
  * Backup system where all edited files (even new unsaved ones) are persisted to disk which means
    all edits are preserved during a restart of Queryeer
fix: Alot of bug fixes etc.
fix: Add search dialog in value popup dialog
fix: Improve performance in text output that don't hangs UI
fix: Fix case insensitiveness in graph component when configuring column namesv1.7.0
fix: Small improvement in table output to flush rows earlier from model to UI
fix: Include throwables in logs dialog
fix: Fix index out of bounds when clicking bars in graph component
fix: Bump payloadbuilder

v1.7.0
feat: Add Graph output component to be able to graph result sets into bar or line graphs.

v1.6.0
fix: Bump payloadbuilder
chore: Change version semantics to have revision part free for fixes as it should have been
fix: Fix issue in find dialog where wrap was checked in UI but not in model

v1.0.5
feat: Bump payloadbuilder
feat: Add a logs dialog to be able to view logs from core and extensions etc.
fix: Misc stability fixes
feat: Add hyperlinks on values in table when context menu actions can handle those
fix: Fix issue with find dialog in table that didn't search correctly
fix: Fix issue in JDBC catalog where connections/database settings wasn't re-setted when swithing tabs

v1.0.4
feat: Add Catalog extension for Payloadbuilder Http Catalog
chore: Bump payloadbuilder

v1.0.3
fix: Select table cell when right click to bring up context menu to avoid that wrong value is used in actions
chore: Bump payloadbuilder

v1.0.2
fix: Adapt code complete to payloadbuilder parse rewrite
fix: Bump payloadbuilder

v1.0.0
feat: Bumping Payloadbuilder to v1.0.0
feat: Auto completions framework for Catalog extensions. Added support for ES and JDBC
feat: Tasks dialog to get an overview of background tasks (such as auto completions)
feat: Added support Jasypt encryption/decryption to let Catalog extensions store secrets encrypted
feat: Improvements in error handling. Coloring and clickable errors/warnings in text output
fix: A lot of UI fixes

BREAKING CHANGE:
  - Java 17 Baseline

v0.9.0
fix: Bump payloadbuilder 
fix: Add changelog in about dialog
fix: Deploy parent pom to avoid broken artifacts in central
fix: Add pipeline for releasing API to central
fix: Change table double click action to open plain data and not json
fix(release-build): Fetch changelog messages from commits

v0.8.0
fix: Added an eventbus to be able to abstract away alot of boiler plate UI code 
feat: Added support for output component toolbar actions 
feat: Added support for file output extension 
fix: Bump payloadbuilder 
fix: Misc refactoring etc. 
feat(build): Add changelog to GITHUB release build 
feat: Added support for find/replace in text editor and table output result 
fix: Bump dependencies
fix: Add missing image referenced in README

Payloadbuilder

v1.9.2
fix: Add proper URL encoding of endpoints in HttpCatalog
fix: Guard against NPE when fetching datastreams without any properties
fix: Fix index seek to adapt to batch_size option and call downstream datasource in batches

v1.9.1
fix: Guard against NPE when analyzing a predicate with a dereference expression
fix: Add issue where a dereference column/expression couldn't be used in indices
fix: Add copy of nowUtc variable in copy-ctor of StatementContext

v1.8.0
fix: Don't write an initial newline in CsvOutputWriter when there are no columns or only empty columns
fix: Guard against NPE in mutable object vector for implementations that don't check size correctly
fix: Don't call initResult on OutputWriter until we actually have a result
fix: Add fix for jsonoutputwriter where there are no rows along with all resultsets as arrays where we tried to write endarray when no startarray was emited
fix: Don't log error when we try to fetch datastreams on aliases
fix: Add proper implicit casts to getString in ValueVector
fix: Remove support for variables to be a QualifiedName, otherwise it's impossible to dereference variables ala '@var.object.key'
fix: Make cleanup thread in JdbcCatalog daemon

v1.7.0
feat: Implement a full expression transpiler that generates an ES query from a PLB expression. Handle nested and/or/not's etc.
feat: Add support for having outer references in inner/left joins when the inner is of expression scan type
fix: Fixed issue where in expression did not work for temporary table indices
fix: Hash Any values the same way as regular types to be able to get correct results in hash match etc.
fix: Evaluate set statements during complie phase to be able to use variables fully in UseStatements etc.
feat: Add string_split scalar function
fix: Include indices in temporary tables meta query
fix: Double the buffer capacity when resizing to avoid to much allocation/copying
fix: Increase performance by precalculating table stats. upon create instead of when used
fix: Fixed issue where some columns did not appear in a schema less query with asterisk selects
fix: Move logical plan rule SubQueryExpressionPushDown to before ColumnResolver to remove alot of complex code.
fix: Fix issue with order by ordinal along with an asterisk select that yielded an ambiguity
build(deps): Bump commons-io:commons-io from 2.13.0 to 2.14.0
fix: Drop out of writing if there is an abort signal in session
feat: Add parseDuration and parseDatasize scalar functions
fix: Improve performance in AInMemoryCache by avoiding compute section in concurrent hashmap
fix: Javadoc newlines
fix: Fix support for assaignment expressions in aggregates
fix: Fixed issue when seek predicate had a null value on first row then whole join broke
fix: Guard against calling downstream datasource in index seek operator if all seek values was null => no possible result

v1.6.0
build: Don't run sql server 2017 when the container fails to start. Happens somehow in GITHUB actions
fix: Fixed issues where an aliased column coludn't be referenced when projected multiple times
fix(ESCatalog): Fix broken render template function ... again
fix: Listen to query abort signal in hash match operator
fix(ESCatalog): Fix broken render template function
feat(ESCatalog): Add support for pushing down null predicates to elastic
fix: Add datstream support into strategy mechanism to only query data streams when that is actually supported
fix(ESCatalog): Fetch mappings from datastreams explicitly since those are not exposed via _alias endpoint
chore: Change version semantics to have revision part free for fixes as it should have been
build(deps-dev): Bump com.mysql:mysql-connector-j
fix: Fix issue where a nested sub query expression broke the parent subquery and yielded null as a result
fix(payloadbuilder-bytes): Add fix when missing array columns when both schema types was equal
fix: Fix issue where we ended up with a broken tuple vector due to mix of schema columns when having left joins with no matching rows
fix: Fix issue where outer context got cleared in a outer apply chain ending up with a broken tuple vector that does not match the schema
fix: Add created column to cached array in ChainedTupleVector
fix: Fix NPE in RegexpMatchFunction
fix: Only expand asterisk populated columns when directly aliased
fix: Avoid copying inner vector in HashMatch when creaitng resulting populated result
fix: Fix issue when having order bys inside sub query expressions
feat: Add base64 encode/decode scalar functions
feat(ESCatalog): Ignore unavailable indices to avoid crashes when there is a closed index among alias/datastream indices
feat: Add support for utilizing indices for pushdown predicates (atm EQUAL/IN)
feat: Add string_agg scalar function
feat: Introduce a MutableValueVector type to replace all previous builders and was used and is much easier to comprehend and use.
feat: Added a new eval method that takes a selection value vector as input, this to make evaluation must more performant and easier to use. Note that not all expressions has implemented this method here.
fix: Misc allocation fixes when building result vectors
fix: Fixed wrong AtTimeZone expression type
fix: Changed implemenation of CaseExpression to not evaluate expressions for rows that does not need evaluating. This also fixes contract problem where we earlier evaluated else path (or other conditions) for rows that should not get into else.
fix: Fix issue in function openxml when all values in a column was effectively null
fix(ESCatalog): Add retry to HttpClient to recover from slow ELK instances
feat: Implement HashJoin as physical join algorithm
fix: Remove ColumnReference to make all sourounding code a bit easier. That was a really weird construct when we already has CoreColumn to add extra stuff that didn't belong to standard Column.

v1.0.5
feat: Add a unique id to TableSourceReference to be able to have multiple joined data sources with the same actual table
fix: Fix issue with implicit casting from Any (Int/Long) to Boolean
fix: Lower allocations i NestedLoop by only creating loop row and cartesian columns when needed
fix: Avoid using tuplevector builder when we only have one resulting row in a loop and instead create a literal tuple vector with one row
fix: Changed to mutable structs in NestedLoop's hot code path to avoid excessive allocations of anonymous class instances
fix: Added constants for various literal ValueVector's to avoid excessive allocations
feat: Add support for provide a schema compile time for a table variable. This avoids a performance hit runtime when columns are looked up.
feat: Add support for writing to outputstream in JsonOutputWriter to enable writing raw utf8 bytes from UTF8String's, this enables for writing strings without materializing java.lang.String's out of UTF8String's.
fix: Change to a BufferedInputStream in function FilesystemCatalog#contents
fix: Fix issue where UTF8Strings couldn't reflectivly (Any) be conveted to EpochDateTime(offset)
fix: Fix issue where predicates wasn't pushed down to table functions
fix: Fix issue where order by column could not be bound due to not checking aliases but only column names when adding internal projections
fix(payloadbuilder-bytes): Remove validation errors when types mismatch and instead re-create the schema according to payload and have one external and one internal schema. This to be able to change/re-use old non used column slots in the payload.
fix: Fix issue where we couldn't push down a sort/projection expression into a computed projection
fix: Performance fixes in ExpressionMath to avoid allocations when comparing known stuff fix: Optimizations in ObjectBufferVectorBuilder to intern objects and transforming all strings to UFT8String fix: Re-implemented group by to a much more memory efficient structure     This made it possible to run the #1brc in PLB :). Completed at 0:05:42 with a couple of 100 Mb heap
feat: Add TVF openjson, opencsv, openxml that streams input and batches tuplevectors
feat: Changed HTTP catalog to redirect responses to these functions instead of implementing their own parsing
fix: Move missing write methods into OutputWriter to be able to override in writers.
fix: Use bytes version of UTF8String for literals to avoid creating strings when doing comparisions etc. This is a performance fix for catalogs that is optimized and uses only bytes strings aswell. This might harm catalogs that don't uses bytes strings but that should be ok.
feat(HttpCatalog): Add support for JsonResponsePath option to be able to dig into a certain path in response that a tuplevector should be generated
fix(JdbcCatalog): Add housekeeping thread that closes inactive jdbc datasources
Resolve table options
feat: Add support for having a table variable as a table source
fix: Correct JDK version in README

v1.0.4
feat: Add HTTP catalog that can be used to call HTTP endpoints and turn those into table sources
    This catalog supports indexed access via table hints which specifies query patterns with placeholder
    fields that acts as predicated columns
fix: Don't push where predicates down to left joined table sources
feat: Add support for sql dialects in jdbc-catalog
fix(ESCatalog): Fix issue where meta could not be extracted due to no aliases

v1.0.3
fix(ESCatalog): Batch fetching of mappings to avoid memory problems with large aliases (#47)

v1.0.2
feat: Re-wrote expression part in grammar to remove left recursive parts to avoid to deep ast:s

v1.0.0
fix: Guard against NPE when comparing QualifiedName's
fix: Add support for turning CLOB's into Strings in JDBC-catalog
feat: Add support for handling kown exceptions from catalogs
feat: Handle SQLException as a known exception in JdbcCatalog to properly catch ie. raiserrors in SQLServer
fix: Fixed JDBC catalog to handle warnings multiple result sets. Propert closing of connection, statement and resultset etc.
fix: Add support for running actions when query is aborted. For JDBC we terminate any running statements
fix: Fixed issue where all projection expression for a subquery pushdown was aliased when only the first column should have been.
fix: Only check current level for asterisk schema for expression scans
fix: Change ORDER BY/GROUP BY tokens to separate tokens rather than single token to not require one space between them
fix: Fix issue with temporary table with indices where table don't have any rows
fix(ESCatalog): Fix issue with index scans didn't work when casing of index column didn't match
feat(core): Total rewrite of core module. (#41)

- Vector based execution engine. Now all expressions are executed vector by vector and not row by row
  - New data model between operators. Now there is a flat column based model like a regular DBMS'es has
  - Schema and type system. Now all columns/expressions have a proper type. Catalog
    implementations can provide a fully typed Schema for tables/functions to allow for better compilation
    support and execution performance

feat(core): New operators
  - distinct
    Produces the distinct set of input rows
  - having
    Filters a group by input

feat(core): New functions
  See https://github.com/kuseman/payloadbuilder/wiki/Functions for more information
  - abs
  - isjson
  - isjsonarray
  - isjsonobject
  - reverse
  - string_split
  - toarray
  - array
  - ceiling
  - char
  - charindex
  - floor
  - current_timezone
  - format
  - least
  - greatest
  - left
  - right
  - object
  - object_array
  - totable
  - avg

DEPRECATIONS:
  - SQL
    - 'Populate' query hint is deprecated and a regular keyword should be used instead: "INNER POPULATE JOIN <tableSource>"
  - Functions
    - CAST function when having a string expression as data type is deprecated and a string literal should be used instead: "CAST(<expression> AS <data type literal>)"
    - DATEPART/DATEADD function when having a string expression as date part is deprecated and a string literal should be used: "DATEPART(<date part literal>, <date expression>)"

BREAKING CHANGE:
  - Java 17 Baseline
  - Catalog API is totally rewritten in favor of Vector exeution and Schemas. See built in Catalogs for examples
  - Changed behaviours
    - Before when casting an expression to data type DATETIME it was auto transformed into system local time zone and that is not the case anymore because a DATETIME
      has no time zone and casting it into a zoned DATETIME makes no sense and is simply wrong.

      Example:
      Before an expression like this "CAST('2010-10-10T10:10:10Z', 'datetime')" would result in a value like "2020-10-10T12:10:10" (assuming this was executed on a system with +02:00 offset)
      And after this change that expression would simply return the string casted to a DATETIME type who's string representation would be "2010-10-10T10:10:10".
      To get back the old behaviour we need to cast this to a DATETIMEOFFSET and then switch the
      timezone like this: "CAST('2010-10-10T10:10:10Z' AS datetimeoffset) AT TIME ZONE <time zone expression>"
  - Removed functions
    - attimezone
      - replace by "AT TIME ZONE" expression
    - convert
      - was only an alias to CAST
    - union
      - complex function that did more harm than good
    - listof
      - replace by ARRAY function
    - open_map_collection
      - Used when turning a list of JDK maps to a table. Replaced by TOTABLE function in combination with expression table source
        Ie.
        select *
        from (totable(<expression convertable to table>)

        example:
        select *
        from (totable(json_value('[ { "Key": 123 }, { "Key": 456 } ]'))) t
    - open_rows
        Used to turn a populated alias into a selectale table source. Replace by expression table source
        Ie.

        select (
           select *
           from (b) t    <----- select from populated column 'b'
           for object
        ) values
        from tableA a
        inner populate join tableB b
         on ....


v0.8.5
feat(ESCatalog): Add support for version 8.x of Elastic where type is removed
feat: Add new regexp_match scalar function 
fix: Add proper aggreagtion functionallity for count/sum/min/max 
fix: Misc. fixes 
fix: Performance fixes in BatchHashJoin 
fix: Bump verions of github actions

v0.8.4
feat: Add support for back tick template string expression 
fix: Fix failing test of function atTimeZone when running in non Sweden 
fix: Misc fixes from Sonatype Lift
feat: Add atTimeZone function to change a datetime to another zone
fix: Bump library versions

v0.8.3
fix(ESCatalog): Fixed issue with _id index where wrong URL was generated
fix(ESCatalog): Try to format error message from ES as JSON

v0.8.2
fix: Fix checkstyle
fix: Clean up of cache namings. Don't expose implementation in API bundle

v0.8.1
fix: Fix README and minor stuff in pom's
